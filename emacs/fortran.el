
(setq fortran-blink-matching-if t)
(setq fortran-check-all-num-for-matching-do t)
(setq fortran-comment-indent-style nil)
(setq fortran-comment-line-start "!")
(setq fortran-line-length 128)

;; ;; (fset 'FortranDimension
;; ;;    [?\C-e ?\C-  ?\C-r ?\( right left ?\C-k ?\C-r ?\) right left right ?, ?d ?i ?m ?e ?n ?s ?i ?o ?n ?\C-y])


;; ;; (fset 'CleanFort
;; ;;    [?\M-x ?r ?e ?p ?l ?a ?c ?e ?- ?r ?e ?g tab return ?^ ?C return ?! return C-home ?\M-x up return ?^ ?! ?  ?* ?$ return return C-home ?\C-  C-end ?\M-x ?d ?o ?w ?n ?c ?a ?s ?e ?- ?r ?e ?g ?i ?o ?n return])

;; ;; (fset 'JoinLines
;; ;;    [?\M-x ?s ?e ?a ?r ?c ?h tab ?f ?o ?r ?w ?a ?r tab ?- ?r ?e ?g tab return ?^ ?  ?  ?  ?  ?  ?[ ?^ ?[ ?: ?s ?p ?a ?c ?e ?: ?] ?} backspace ?] ?  ?+ return ?\M-x ?f ?o ?r ?t ?r ?a ?n tab ?j ?o ?i tab return])

;; ;; (fset 'LogicalBreak
;; ;;    [?\C-s ?, right left backspace return tab ?l ?o ?g ?i ?c ?a ?l ? ?: ?: ? ])

;; ;; (fset 'RealBreak
;; ;;    [?\C-s ?, right left backspace return tab ?r ?e ?a ?l ?  ?: ?: ? ])

;; ;; (fset 'IntegerBreak
;; ;;    [?\C-s ?, right left backspace return tab ?i ?n ?t ?e ?g ?e ?r ?  ?: ?: ? ])
;; ;; (fset 'DoClean
;; ;;    [?\M-x ?s ?e ?a ?r tab ?f ?o ?r ?w tab ?- ?r ?e ?g tab return ?\\ ?W ?d ?o ?\\ ?W ?[ ?0 ?- ?9 ?] ?+ return ?\C-  C-left ?\C-w backspace ?\C-s ?c ?o ?n ?t ?i ?n ?u ?e ?\C-a ?\C-k ?e ?n ?d ?  ?d ?o ?\C-a tab down])
